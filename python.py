B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch d·ª± √°n ƒë·∫ßu t∆∞ c√≥ kinh nghi·ªám. D·ª±a tr√™n c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ d·ª± √°n sau, h√£y ƒë∆∞a ra nh·∫≠n x√©t ng·∫Øn g·ªçn, kh√°ch quan (kho·∫£ng 3-4 ƒëo·∫°n) v·ªÅ kh·∫£ nƒÉng ch·∫•p nh·∫≠n v√† r·ªßi ro c·ªßa d·ª± √°n. 
        
        C√°c ch·ªâ s·ªë c·∫ßn ph√¢n t√≠ch:
        - NPV: {metrics_data['NPV']:.2f}
        - IRR: {metrics_data['IRR']:.2%}
        - WACC (T·ª∑ l·ªá chi·∫øt kh·∫•u): {wacc_rate:.2%}
        - PP (Th·ªùi gian ho√†n v·ªën): {metrics_data['PP']} nƒÉm
        - DPP (Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u): {metrics_data['DPP']} nƒÉm
        
        Ch√∫ √Ω:
        1. ƒê√°nh gi√° t√≠nh kh·∫£ thi (NPV > 0 v√† IRR > WACC).
        2. Nh·∫≠n x√©t v·ªÅ t·ªëc ƒë·ªô ho√†n v·ªën (PP v√† DPP).
        3. K·∫øt lu·∫≠n t·ªïng th·ªÉ v·ªÅ vi·ªác ch·∫•p nh·∫≠n hay t·ª´ ch·ªëi d·ª± √°n.
        """

        response = client.models.generate_content(
            model=model_name,
            contents=prompt
        )
        return response.text

    except APIError as e:
        return f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API. Chi ti·∫øt l·ªói: {e}"
    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {e}"

# --- Giao di·ªán v√† Lu·ªìng ch√≠nh ---

# L·∫•y API Key
api_key = st.secrets.get("GEMINI_API_KEY")

if not api_key:
     st.error("‚ö†Ô∏è Vui l√≤ng c·∫•u h√¨nh Kh√≥a 'GEMINI_API_KEY' trong Streamlit Secrets ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng AI.")

uploaded_file = st.file_uploader(
    "1. T·∫£i file Word (.docx) ch·ª©a Ph∆∞∆°ng √°n Kinh doanh:",
    type=['docx']
)

# Kh·ªüi t·∫°o state ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu ƒë√£ tr√≠ch xu·∫•t
if 'extracted_data' not in st.session_state:
    st.session_state['extracted_data'] = None

# --- Ch·ª©c nƒÉng 1: L·ªçc d·ªØ li·ªáu b·∫±ng AI ---
if uploaded_file is not None:
    doc_text = read_docx_file(uploaded_file)
    
    if st.button("Tr√≠ch xu·∫•t D·ªØ li·ªáu T√†i ch√≠nh b·∫±ng AI ü§ñ"):
        if api_key:
            with st.spinner('ƒêang ƒë·ªçc v√† tr√≠ch xu·∫•t th√¥ng s·ªë t√†i ch√≠nh b·∫±ng Gemini...'):
                try:
                    st.session_state['extracted_data'] = extract_financial_data(doc_text, api_key)
                    st.success("Tr√≠ch xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng!")
                except APIError:
                    st.error("L·ªói API: Kh√¥ng th·ªÉ k·∫øt n·ªëi ho·∫∑c x√°c th·ª±c API Key.")
                except Exception as e:
                    st.error(f"L·ªói tr√≠ch xu·∫•t: {e}")
        else:
            st.error("Vui l√≤ng cung c·∫•p Kh√≥a API.")

# --- Hi·ªÉn th·ªã v√† T√≠nh to√°n (Y√™u c·∫ßu 2 & 3) ---
if st.session_state['extracted_data'] is not None:
    data = st.session_state['extracted_data']
    
    st.subheader("2. C√°c Th√¥ng s·ªë D·ª± √°n ƒë√£ Tr√≠ch xu·∫•t")
    
    # Hi·ªÉn th·ªã c√°c th√¥ng s·ªë quan tr·ªçng (Chuy·ªÉn ƒë·ªïi c√°c th√¥ng s·ªë v·ªÅ ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá/ph·∫ßn trƒÉm)
    col1, col2, col3 = st.columns(3)
# requirements.txt cho ·ª©ng d·ª•ng ƒê√°nh gi√° Ph∆∞∆°ng √°n Kinh doanh

# Th∆∞ vi·ªán ch√≠nh cho giao di·ªán web
streamlit

# Th∆∞ vi·ªán x·ª≠ l√Ω d·ªØ li·ªáu (b·∫Øt bu·ªôc)
pandas

# Th∆∞ vi·ªán cho t√≠nh to√°n t√†i ch√≠nh (ƒë·∫∑c bi·ªát l√† NPV, IRR)
numpy

# Th∆∞ vi·ªán cho ch·ª©c nƒÉng AI (s·ª≠ d·ª•ng Gemini API)
google-genai

# Th∆∞ vi·ªán c·∫ßn thi·∫øt ƒë·ªÉ x·ª≠ l√Ω file Word (.docx)
python-docx

# Th∆∞ vi·ªán cho x·ª≠ l√Ω file Excel (n·∫øu c·∫ßn cho c√°c ch·ª©c nƒÉng kh√°c sau n√†y)
openpyxl 

# tabulate (gi·ªØ l·∫°i v√¨ c√≥ th·ªÉ h·ªØu √≠ch cho to_markdown() trong m·ªôt s·ªë m√¥i tr∆∞·ªùng)
tabulate
