# app.py

import streamlit as st
from docx import Document
import numpy as np
import numpy_financial as npf
import pandas as pd
import json
import time

# --- 1. H√†m Gi·∫£ L·∫≠p AI (Thay th·∫ø b·∫±ng API AI th·∫≠t) ---

def extract_financial_data_from_document(docx_file_path):
    """
    Gi·∫£ l·∫≠p vi·ªác s·ª≠ d·ª•ng AI (v√≠ d·ª•: GPT-4 ho·∫∑c Gemini) ƒë·ªÉ tr√≠ch xu·∫•t 
    d·ªØ li·ªáu t√†i ch√≠nh t·ª´ n·ªôi dung vƒÉn b·∫£n Word.
    
    Trong th·ª±c t·∫ø, b·∫°n s·∫Ω g·ª≠i n·ªôi dung vƒÉn b·∫£n (text) c·ªßa file Word 
    ƒë·∫øn m·ªôt m√¥ h√¨nh ng√¥n ng·ªØ l·ªõn (LLM) v√† y√™u c·∫ßu n√≥ tr√≠ch xu·∫•t 
    d·ªØ li·ªáu theo ƒë·ªãnh d·∫°ng JSON.
    """
    # ƒê·ªçc n·ªôi dung t·ª´ file Word
    document = Document(docx_file_path)
    full_text = []
    for paragraph in document.paragraphs:
        full_text.append(paragraph.text)
    
    # Gi·∫£ ƒë·ªãnh LLM ƒë√£ x·ª≠ l√Ω v√† tr·∫£ v·ªÅ JSON sau:
    # B·∫°n s·∫Ω c·∫ßn tinh ch·ªânh prompt ƒë·ªÉ LLM lu√¥n tr·∫£ v·ªÅ c·∫•u tr√∫c n√†y.
    
    # D·ªØ li·ªáu gi·∫£ ƒë·ªãnh ƒë∆∞·ª£c tr√≠ch xu·∫•t:
    extracted_data = {
        "V·ªën_ƒê·∫ßu_T∆∞_Ban_ƒê·∫ßu": -500000000,  # L∆∞u √Ω: l√† d√≤ng ti·ªÅn ra (√¢m)
        "D√≤ng_ƒê·ªùi_D·ª±_√Ån_NƒÉm": 5,           # S·ªë nƒÉm
        "Doanh_Thu_NƒÉm": [150000000, 200000000, 250000000, 300000000, 350000000],
        "Chi_Ph√≠_V·∫≠n_H√†nh_NƒÉm": [50000000, 60000000, 70000000, 80000000, 90000000],
        "WACC_Ph·∫ßn_TrƒÉm": 0.10,          # 10%
        "Thu·∫ø_Su·∫•t_Ph·∫ßn_TrƒÉm": 0.20       # 20%
    }
    
    # Tr·∫£ v·ªÅ d·ªØ li·ªáu tr√≠ch xu·∫•t d∆∞·ªõi d·∫°ng dictionary
    return extracted_data

# --- 2. H√†m T√≠nh To√°n Ch·ªâ S·ªë Hi·ªáu Qu·∫£ D·ª± √Ån ---

def calculate_project_metrics(initial_investment, life_years, revenues, operating_costs, wacc, tax_rate):
    """
    X√¢y d·ª±ng b·∫£ng d√≤ng ti·ªÅn v√† t√≠nh to√°n c√°c ch·ªâ s·ªë NPV, IRR, PP, DPP.
    """
    
    if life_years <= 0 or not all(len(lst) == life_years for lst in [revenues, operating_costs]):
        raise ValueError("D·ªØ li·ªáu d√≤ng ƒë·ªùi d·ª± √°n, doanh thu ho·∫∑c chi ph√≠ kh√¥ng h·ª£p l·ªá.")

    # Kh·ªüi t·∫°o DataFrame cho B·∫£ng D√≤ng Ti·ªÅn (Cash Flow)
    years = range(1, life_years + 1)
    df = pd.DataFrame({
        'NƒÉm': years,
        'Doanh Thu': revenues,
        'Chi Ph√≠ V·∫≠n H√†nh': operating_costs,
    })
    
    # 1. L·ª£i nhu·∫≠n tr∆∞·ªõc thu·∫ø (EBT)
    df['L·ª£i Nhu·∫≠n Tr∆∞·ªõc Thu·∫ø (EBT)'] = df['Doanh Thu'] - df['Chi Ph√≠ V·∫≠n H√†nh']
    
    # 2. Thu·∫ø TNDN
    df['Thu·∫ø (Tax)'] = df['L·ª£i Nhu·∫≠n Tr∆∞·ªõc Thu·∫ø (EBT)'] * tax_rate
    
    # 3. L·ª£i nhu·∫≠n sau thu·∫ø (EAT) - ƒê√¢y l√† D√≤ng Ti·ªÅn Thu·∫ßn (Net Cash Flow) cho m·ª•c ƒë√≠ch t√≠nh to√°n c∆° b·∫£n
    # (Gi·∫£ ƒë·ªãnh kh√¥ng c√≥ Kh·∫•u hao, V·ªën l∆∞u ƒë·ªông, Gi√° tr·ªã thanh l√Ω)
    df['D√≤ng Ti·ªÅn Thu·∫ßn'] = df['L·ª£i Nhu·∫≠n Tr∆∞·ªõc Thu·∫ø (EBT)'] - df['Thu·∫ø (Tax)']
    
    # D√£y d√≤ng ti·ªÅn (bao g·ªìm v·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu)
    cash_flows = [initial_investment] + df['D√≤ng Ti·ªÅn Thu·∫ßn'].tolist()
    
    # T√≠nh to√°n c√°c ch·ªâ s·ªë
    npv = npf.npv(wacc, cash_flows)
    irr = npf.irr(cash_flows)
    
    # T√≠nh th·ªùi gian ho√†n v·ªën (Payback Period - PP)
    cumulative_cf = np.cumsum(cash_flows)
    pp_year = np.argmax(cumulative_cf > 0)
    if pp_year > 0:
        # PP = NƒÉm tr∆∞·ªõc khi ho√†n v·ªën + |CF t√≠ch l≈©y nƒÉm tr∆∞·ªõc| / CF nƒÉm ho√†n v·ªën
        pp = pp_year - 1 + abs(cumulative_cf[pp_year - 1]) / cash_flows[pp_year]
    else:
        pp = np.nan # Ch∆∞a ho√†n v·ªën trong d√≤ng ƒë·ªùi d·ª± √°n
        
    # T√≠nh th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u (Discounted Payback Period - DPP)
    discounted_cf = [cf / (1 + wacc)**i for i, cf in enumerate(cash_flows)]
    df['D√≤ng Ti·ªÅn Chi·∫øt Kh·∫•u'] = discounted_cf[1:]
    
    cumulative_discounted_cf = np.cumsum(discounted_cf)
    dpp_year = np.argmax(cumulative_discounted_cf > 0)
    if dpp_year > 0:
        # DPP = NƒÉm tr∆∞·ªõc khi ho√†n v·ªën + |DCF t√≠ch l≈©y nƒÉm tr∆∞·ªõc| / DCF nƒÉm ho√†n v·ªën
        dpp = dpp_year - 1 + abs(cumulative_discounted_cf[dpp_year - 1]) / discounted_cf[dpp_year]
    else:
        dpp = np.nan # Ch∆∞a ho√†n v·ªën trong d√≤ng ƒë·ªùi d·ª± √°n
        
    metrics = {
        'NPV': npv,
        'IRR': irr,
        'WACC': wacc,
        'Payback Period (PP)': pp,
        'Discounted Payback Period (DPP)': dpp
    }
    
    return df, metrics

# --- 3. H√†m Ph√¢n T√≠ch AI ---

def analyze_metrics_with_ai(metrics):
    """
    Gi·∫£ l·∫≠p vi·ªác s·ª≠ d·ª•ng AI ƒë·ªÉ ph√¢n t√≠ch c√°c ch·ªâ s·ªë ƒë√£ t√≠nh to√°n.
    
    Trong th·ª±c t·∫ø, b·∫°n s·∫Ω g·ª≠i c√°c ch·ªâ s·ªë n√†y ƒë·∫øn LLM v√† y√™u c·∫ßu n√≥ 
    ƒë∆∞a ra nh·∫≠n ƒë·ªãnh v·ªÅ hi·ªáu qu·∫£ v√† r·ªßi ro c·ªßa d·ª± √°n.
    """
    
    # Gi·∫£ l·∫≠p ph√¢n t√≠ch d·ª±a tr√™n logic ƒë∆°n gi·∫£n
    analysis = "üìà **Ph√¢n T√≠ch ƒê√°nh Gi√° Hi·ªáu Qu·∫£ D·ª± √Ån:**\n\n"
    
    # Ti√™u ch√≠ c∆° b·∫£n
    NPV_criterion = metrics['NPV'] > 0
    IRR_criterion = metrics['IRR'] > metrics['WACC']
    
    # Nh·∫≠n ƒë·ªãnh chung
    if NPV_criterion and IRR_criterion:
        analysis += "‚úÖ **ƒê√ÅNH GI√Å T·ªîNG TH·ªÇ: KH·∫¢ THI CAO!**\n"
        analysis += "D·ª± √°n c√≥ **NPV > 0** v√† **IRR ({:.2f}%) > WACC ({:.2f}%)**, cho th·∫•y d·ª± √°n t·∫°o ra gi√° tr·ªã th·∫∑ng d∆∞ r√≤ng cho doanh nghi·ªáp sau khi ƒë√£ b√π ƒë·∫Øp chi ph√≠ v·ªën. D·ª± √°n n√™n ƒë∆∞·ª£c **CH·∫§P THU·∫¨N**.\n\n".format(metrics['IRR'] * 100, metrics['WACC'] * 100)
    elif NPV_criterion:
        analysis += "‚ö†Ô∏è **ƒê√ÅNH GI√Å T·ªîNG TH·ªÇ: C·∫¶N XEM X√âT TH√äM!**\n"
        analysis += "NPV > 0 nh∆∞ng IRR < WACC. ƒêi·ªÅu n√†y th∆∞·ªùng l√† m√¢u thu·∫´n trong c√°c tr∆∞·ªùng h·ª£p ƒë∆°n gi·∫£n. C·∫ßn ki·ªÉm tra l·∫°i d·ªØ li·ªáu ho·∫∑c gi·∫£ ƒë·ªãnh. Tuy nhi√™n, theo ti√™u ch√≠ NPV (ti√™u ch√≠ tin c·∫≠y nh·∫•t), d·ª± √°n v·∫´n **Kh·∫£ thi**.\n\n"
    else:
        analysis += "‚ùå **ƒê√ÅNH GI√Å T·ªîNG TH·ªÇ: KH√îNG KH·∫¢ THI!**\n"
        analysis += "D·ª± √°n c√≥ **NPV < 0** v√† **IRR ({:.2f}%) < WACC ({:.2f}%)**, cho th·∫•y d·ª± √°n s·∫Ω l√†m gi·∫£m gi√° tr·ªã c·ªßa doanh nghi·ªáp. D·ª± √°n n√™n b·ªã **T·ª™ CH·ªêI**.\n\n".format(metrics['IRR'] * 100, metrics['WACC'] * 100)

    # Nh·∫≠n ƒë·ªãnh v·ªÅ r·ªßi ro v√† ho√†n v·ªën
    analysis += "---"
    analysis += "\n\n* **Th·ªùi Gian Ho√†n V·ªën (PP & DPP):**\n"
    if metrics['PP'] < metrics['DPP']:
        analysis += "- **PP ({:.2f} nƒÉm)** nh·ªè h∆°n **DPP ({:.2f} nƒÉm)**, ƒëi·ªÅu n√†y l√† h·ª£p l√Ω do DPP t√≠nh ƒë·∫øn gi√° tr·ªã th·ªùi gian c·ªßa ti·ªÅn. Th·ªùi gian ho√†n v·ªën t∆∞∆°ng ƒë·ªëi **nhanh/ch·∫≠m** (t√πy thu·ªôc v√†o k·ª≥ v·ªçng c·ªßa ng√†nh).\n".format(metrics['PP'], metrics['DPP'])
    else:
        analysis += "- Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u (**DPP: {:.2f} nƒÉm**) l√† ch·ªâ s·ªë quan tr·ªçng h∆°n ƒë·ªÉ ƒë√°nh gi√° r·ªßi ro thanh kho·∫£n.\n".format(metrics['DPP'])
        
    analysis += "\n* **R·ªßi Ro:** IRR c√†ng cao so v·ªõi WACC, m·ª©c ƒë·ªô an to√†n (bi√™n ƒë·ªô r·ªßi ro) c·ªßa d·ª± √°n c√†ng l·ªõn.\n"
    
    return analysis


# --- 4. Giao Di·ªán Streamlit ---

def main():
    st.set_page_config(page_title="ƒê√°nh Gi√° D·ª± √Ån Kinh Doanh (AI-Powered)", layout="wide")
    st.title("üí∞ ·ª®ng D·ª•ng ƒê√°nh Gi√° D·ª± √Ån Kinh Doanh T·ª± ƒê·ªông")
    st.markdown("S·ª≠ d·ª•ng AI ƒë·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ file Word v√† t√≠nh to√°n hi·ªáu qu·∫£ t√†i ch√≠nh.")
    
    # Kh·ªüi t·∫°o session state ƒë·ªÉ l∆∞u d·ªØ li·ªáu gi·ªØa c√°c l·∫ßn ch·∫°y
    if 'extracted_data' not in st.session_state:
        st.session_state['extracted_data'] = None
    if 'cash_flow_df' not in st.session_state:
        st.session_state['cash_flow_df'] = None
    if 'metrics' not in st.session_state:
        st.session_state['metrics'] = None
        
    
    # KHU V·ª∞C T·∫¢I FILE
    st.subheader("1. T·∫£i L√™n H·ªì S∆° D·ª± √Ån (File Word)")
    uploaded_file = st.file_uploader("Ch·ªçn file Word (.docx)", type="docx")
    
    if uploaded_file is not None:
        
        # L∆∞u file t·∫°m th·ªùi ƒë·ªÉ th∆∞ vi·ªán docx ƒë·ªçc ƒë∆∞·ª£c
        with open("temp_doc.docx", "wb") as f:
            f.write(uploaded_file.getbuffer())
        
        st.success(f"ƒê√£ t·∫£i file **{uploaded_file.name}** th√†nh c√¥ng!")
        
        # N√∫t b·∫•m ƒë·ªÉ th·ª±c hi·ªán thao t√°c l·ªçc d·ªØ li·ªáu
        if st.button("ü§ñ L·ªçc D·ªØ Li·ªáu T√†i Ch√≠nh B·∫±ng AI"):
            with st.spinner('ƒêang s·ª≠ d·ª•ng AI ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin t√†i ch√≠nh...'):
                time.sleep(1) # Gi·∫£ l·∫≠p th·ªùi gian x·ª≠ l√Ω API
                try:
                    # G·ªçi h√†m tr√≠ch xu·∫•t
                    data = extract_financial_data_from_document("temp_doc.docx")
                    st.session_state['extracted_data'] = data
                    
                    st.toast("‚úÖ ƒê√£ tr√≠ch xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng!", icon='ü§ñ')
                except Exception as e:
                    st.error(f"L·ªói khi tr√≠ch xu·∫•t d·ªØ li·ªáu: {e}")
                    st.session_state['extracted_data'] = None

    
    # KHU V·ª∞C HI·ªÇN TH·ªä D·ªÆ LI·ªÜU ƒê√É L·ªåC V√Ä T√çNH TO√ÅN
    if st.session_state['extracted_data']:
        
        data = st.session_state['extracted_data']
        
        st.subheader("2. D·ªØ Li·ªáu T√†i Ch√≠nh ƒê√£ L·ªçc")
        
        # Hi·ªÉn th·ªã c√°c th√¥ng s·ªë quan tr·ªçng d∆∞·ªõi d·∫°ng metric
        col1, col2, col3, col4, col5, col6 = st.columns(6)
        col1.metric("V·ªën ƒê·∫ßu T∆∞", f"{data['V·ªën_ƒê·∫ßu_T∆∞_Ban_ƒê·∫ßu']:,.0f} VNƒê")
        col2.metric("D√≤ng ƒê·ªùi D·ª± √Ån", f"{data['D√≤ng_ƒê·ªùi_D·ª±_√Ån_NƒÉm']} NƒÉm")
        col3.metric("WACC", f"{data['WACC_Ph·∫ßn_TrƒÉm'] * 100:.2f}%")
        col4.metric("Thu·∫ø Su·∫•t", f"{data['Thu·∫ø_Su·∫•t_Ph·∫ßn_TrƒÉm'] * 100:.0f}%")
        
        # Hi·ªÉn th·ªã Doanh Thu & Chi Ph√≠ (D√πng Expander ƒë·ªÉ g·ªçn)
        with st.expander("Xem chi ti·∫øt D√≤ng Ti·ªÅn h√†ng nƒÉm"):
            st.dataframe(pd.DataFrame({
                'NƒÉm': range(1, data['D√≤ng_ƒê·ªùi_D·ª±_√Ån_NƒÉm'] + 1),
                'Doanh Thu (VNƒê)': [f"{x:,.0f}" for x in data['Doanh_Thu_NƒÉm']],
                'Chi Ph√≠ V·∫≠n H√†nh (VNƒê)': [f"{x:,.0f}" for x in data['Chi_Ph√≠_V·∫≠n_H√†nh_NƒÉm']]
            }))
            
        
        # --- 2. X√¢y d·ª±ng B·∫£ng D√≤ng Ti·ªÅn v√† T√≠nh To√°n Ch·ªâ S·ªë ---
        if st.button("üìä T√≠nh To√°n B·∫£ng D√≤ng Ti·ªÅn v√† Ch·ªâ S·ªë Hi·ªáu Qu·∫£"):
            with st.spinner('ƒêang t√≠nh to√°n c√°c ch·ªâ s·ªë t√†i ch√≠nh...'):
                try:
                    df_cf, metrics = calculate_project_metrics(
                        initial_investment=data['V·ªën_ƒê·∫ßu_T∆∞_Ban_ƒê·∫ßu'],
                        life_years=data['D√≤ng_ƒê·ªùi_D·ª±_√Ån_NƒÉm'],
                        revenues=data['Doanh_Thu_NƒÉm'],
                        operating_costs=data['Chi_Ph√≠_V·∫≠n_H√†nh_NƒÉm'],
                        wacc=data['WACC_Ph·∫ßn_TrƒÉm'],
                        tax_rate=data['Thu·∫ø_Su·∫•t_Ph·∫ßn_TrƒÉm']
                    )
                    st.session_state['cash_flow_df'] = df_cf
                    st.session_state['metrics'] = metrics
                    st.toast("‚úÖ ƒê√£ t√≠nh to√°n xong!", icon='üìä')
                    
                except ValueError as e:
                    st.error(f"L·ªói t√≠nh to√°n: {e}")

    
    # KHU V·ª∞C HI·ªÇN TH·ªä K·∫æT QU·∫¢ V√Ä PH√ÇN T√çCH
    if st.session_state['metrics']:
        
        st.subheader("3. K·∫øt Qu·∫£ ƒê√°nh Gi√° Hi·ªáu Qu·∫£ D·ª± √Ån")
        
        metrics = st.session_state['metrics']
        
        # Hi·ªÉn th·ªã c√°c ch·ªâ s·ªë ch√≠nh (NPV, IRR)
        col_m1, col_m2, col_m3, col_m4 = st.columns(4)
        col_m1.metric("Net Present Value (NPV)", f"{metrics['NPV']:,.0f} VNƒê", 
                      delta="D·ª± √°n t·∫°o ra l·ª£i √≠ch r√≤ng")
        col_m2.metric("Internal Rate of Return (IRR)", f"{metrics['IRR'] * 100:.2f}%", 
                      delta=f"So v·ªõi WACC ({metrics['WACC'] * 100:.2f}%)")
        col_m3.metric("Payback Period (PP)", f"{metrics['Payback Period (PP)']:.2f} NƒÉm")
        col_m4.metric("Discounted Payback Period (DPP)", f"{metrics['Discounted Payback Period (DPP)']:.2f} NƒÉm")
        
        
        st.markdown("---")
        st.subheader("B·∫£ng D√≤ng Ti·ªÅn Chi Ti·∫øt")
        st.dataframe(st.session_state['cash_flow_df'].style.format('{:,.0f}', subset=pd.IndexSlice[:, st.session_state['cash_flow_df'].columns != 'NƒÉm']))
        
        st.markdown("---")
        
        # --- 4. Ch·ª©c nƒÉng y√™u c·∫ßu AI ph√¢n t√≠ch ---
        if st.button("üß† Y√™u C·∫ßu AI Ph√¢n T√≠ch C√°c Ch·ªâ S·ªë"):
            with st.spinner('ƒêang s·ª≠ d·ª•ng AI ƒë·ªÉ ph√¢n t√≠ch v√† ƒë∆∞a ra nh·∫≠n ƒë·ªãnh...'):
                time.sleep(1.5) # Gi·∫£ l·∫≠p th·ªùi gian x·ª≠ l√Ω API
                analysis_result = analyze_metrics_with_ai(metrics)
                st.subheader("4. Ph√¢n T√≠ch v√† ƒê·ªÅ Xu·∫•t c·ªßa AI")
                st.markdown(analysis_result)
                st.toast("‚úÖ Ho√†n t·∫•t ph√¢n t√≠ch!", icon='üß†')

if __name__ == "__main__":
    main()
